1- Introduction
    goal: build a imaginery cloud hosting website that is:
            * beautiful
            * responsive
            * fast
    we will start with a photoshop design markup.
    then we will hand code this design markup to build the site.
    this website will look great on all screen sizes.
    all What? How? Why? questions will be answered.
    it is best practice to become HTML/CSS expert.

    we will be able to:
        convert any photoshop design markup to a fast responsive website.
________________________________________________________
3- Prerequisites 
    *Semantic HTML elements
    *Basic CSS properties (colors, orders, shadows, fonts, etc.)
    *Selectors & Pseudo-Selectors
    *CSS box model
    *Absolute & Relative positioning
    *Flex & Grid layout
    *Media queries
    *Responsive Images
    *Transformations
    *Transitions
________________________________________________________
4- How to Take This Course
    *Providing needed tools
    *Setting up the project
        photoshop design markups and all supplementary materials (images, icons, fonts)
    *Coding Lessons
        in every lesson we will code a specific part of the design.
        we will learn tips & tricks along the way
        actively get involved:
            - code along
            - try to solve before hand
________________________________________________________
5- Tools You Need
    *Google Chrome browser
    *Chrome DevTools
    *Firefox
    *VSCode Editor 
    *HTML CSS Support extension
    *CSS Peak extension
    *Prettier extension
    *Highlight Matching Tag extension
    *TODO Highlight extension
    *Live Server extension
    *git from https://git-scm.com
________________________________________________________
6- Setting Up the Project
    *folder
    *index.html
    *normalize.css
    *styles.css
    *initialize a git repository
        database that tracks project history
    *install fonts
    *install photoshop.
________________________________________________________
7- Essential Photoshop Skills
    *size of fonts
    *measure distances
    *basic tools
________________________________________________________
8- Identifying the Components
    Components of moshified.com 
        logo 
        navbar
        banner (hero)
            heading
            text
            button
        input field
        badge
        inline list
        three column grid 
        cards
            badge
            list
            button
        icon round
        link
        two column grid 
        media componenets
            icon left
            heading right
            text right
        (quote componenet + image = card) : testimonial
        callout
        footer : lists
________________________________________________________
9- Color Palette
    before building componenets lets define our color palette. 
    color palette:
        *primary color :        blue            #2584ff
        *secondary color :      lighter blue    #00d9ff 
        *accent color :         orange          #ff3400
        *heading color :        dark purple     #1b0760
        *bodytext color :       light purple    #918ca4
    we use variables to define color palette so we can reuse them:
        :root {
        --color-primary: #2584ff;
        --color-secondary: #00d9ff;
        --color-accent: #ff3400;
        --color-heading: #1b0760;
        --color-body: #918ca4;
       }
________________________________________________________
10- Typography
    fonts and their sizes.
    as we are going to pick mobile first approach we always look at mobile version first.
    we add the links from https://fonts.google.com 

    then add rule for body font family and color:
        body {
            font-family: Inter, Arial, Helvetica, sans-serif;
            color: var(--color-bodys);
        }

        TRICK: h${Heading $}*3
                <h1>Heading 1</h1>
                <h2>Heading 2</h2>
                <h3>Heading 3</h3>
        
    setting headings color: 
        h1, h2, h3 {
            color: var(--color-heading);
        }
    
    setting font sizes:
        html {
            font-size: 62.5%;
        }

        body {
            font-size: 2.4rem;
        }

        h1 {
            font-size: 7rem;
        }

        h2 {
            font-size: 4rem;
        }

        h3 {
            font-size: 3rem;
        }

    setting line spacing:
        body {
            line-height: 1.5;
        }

    setting margin between heading and text:
    first we measure it in photoshop: 20px --> 2rem 
        h1, h2, h3 {
            margin-bottom: 1rem;
        }

        p {
            /* to avoid margin collapsing */
            margin-top: 0;
        }

    now we are done with mobile version. 
    so now we set the desktop version (1024px):
        @media screen and (min-width: 1024px) {
            body {
                font-size: 1.8rem;
            }
            h1 {
                font-size: 8rem;
            }
            h3 {
                font-size: 2.4rem;
            }
        }
    
    now we are done with typography. 
    next we want to build our first component.
________________________________________________________
11- Links
    first we implement the link componenet.
    learn more links are UPPERCASE.
    links have no underline. 
    We pick the font size and weight from mobile version of photoshop design.

        a {
            text-decoration: none;
        }

        .link-arrow {
            color: var(--color-accent);
            text-transform: uppercase;
            font-weight: bold;
            font-size: 2rem;
        }
    
    now we want the arrow after the link.
    we implement this with after Pseudo-Selector:
        we also can add icon instead of 

        .link-arrow::after {
            content: '-->';
            margin-left: 5px;
        }
    
    we want the arrow move to right in hover state:

        .link-arrow::after {
            transition: margin-left 0.15s;
        }

        .link-arrow:hover::after {
            margin-left: 10px;
        }
    
    now we set the changes for desktop version:

        @media screen and (min-width: 1024px) {
            .link-arrow {
                font-size: 1.5rem;
            }
        }
    it is better to add media queries after each section.
    to better organize the componenets it is better to make a folder and keep a sample of each componenet.
________________________________________________________
12- Badges 
    size wise:
        large Badges
        small Badges
    color wise:
        light blue
        darker blue
    
    so we are gonna apply (OOP CSS). 
    second principle of OOPCSS: seperating structure from skin.
    so we will have to class for badges:
        1 fonts and paddings

            .badge {
                border-radius: 20px;
                padding: 0.5rem 2rem;
                font-weight: bold;
                white-space: nowrap;
                color: #fff;
            }

        2 color and skin 

            .badge--primary {
                background: var(--color-primary);
            }

            .badge--secondary {
                background: var(--color-secondary);
            }

            .badge--small {
                font-size: 1.6rem;
            }

    now we set the changes for desktop version:

        @media screen and (min-width: 1024px) {
            .badge {
                font-size: 1.5rem;
            }
            .badge--small {
                font-size: 1.2rem;
            }
________________________________________________________
13- Lists
    *horizontal (inline) list for navbar
    *vertical list with green ticks for cards
    *vertical list footer 
    
        .list {
            list-style: none;   #getting rid of bullet
            padding-left: 0;    #getting rid of default left padding
            color: var(--color-heading);
        }
    
    now we give each list item a class by BEM:

        .list--inline .list__item {
            display: inline-block;
            margin-right: 2rem;
        }

    now we define rules for horizontal lists:

        .list--tick {
            list-style-image: url(../images/tick.svg);
            padding-left: 3rem;
        }

        .list--tick .list__item {
            padding-left: 0.5rem;
            margin-bottom: 1rem;
        }

    now we set the changes for desktop version:
        @media screen and (min-width: 1024px) {
            .list--tick .list__item {
                padding-left: 0;
            }
        }
________________________________________________________
14- Icons
    all icons are black and have transparent bg.
    in design markup the icons are blue.
    in some cases they're placed in circle and grey bg color.
    first we combine all the icon images in single image sprite.
    https://svgsprit.es
    then put the image in images folder.
    we copy the element to the markup from down below the page:

        <svg class="icon">
        <use xlink:href="#settings"></use>
        </svg>

    the <use> contains a link referring to the sprite file.
    #settings is the id of sprite file we have to reference the address:

        <svg class="icon">
        <use xlink:href=".images/sprite.svg#settings"></use>
        </svg>
    
    now we have loaded icon to the page. 
    we work on sizing and color of icon:

        .icon {
            width: 40px;
            height: 40px;
        }

        .icon--primary {
            fill: var(--color-primary)
        }
    
    now we work on the circle use case:
    we wrap the icon in a <span> with class of icon-container
    now we set the rules for icon-container:

        .icon-container {
            background: #f3f9fa;
            width: 64px;
            height: 64px;
            border-radius: 100%;
            display: inline-flex;
            justify-content: center;
            align-items: center;
        }
________________________________________________________
15- Buttons
    we have some variations for buttons.
    COLOR vise:
        *accent color buttons
        *outline buttons
            hover effect
        *
        secondary color button
    SIZE vise:
        *content fit 
        *container fit (block buttons)

    so we define our buttons. the hover effect of each button next to its normal state:

        .btn {
            border-radius: 40px;
            border: 0;
            /* to make the pointer into a hand */
            cursor: pointer;
            font-size: 1.8rem;
            font-weight: 600;
            margin: 1rem 0;
            padding: 2rem 3rem;
            text-align: center;
            text-transform: uppercase;
            white-space: nowrap;
        }

        .btn--primary {
            background: var(--color-primary);
            color: #fff;
        }

        .btn--primary:hover {
            background: #69aaff;
        }

        .btn--secondary {
            background: var(--color-secondary);
            color: #fff;
        }
        .btn--secondary:hover {
            background: #86edff;
        }
        .btn--accent {
            background: var(--color-accent);
            color: #fff;
        }

        .btn--accent:hover {
            background: #ff9073;
        }

        .btn--outline {
            /* to make it container size */
            width: 100%;
            display: inline-block;
            background: #fff;
            border: 2px solid var(--color-heading);
            color: var(--color-heading);
        }

        .btn--outline:hover {
            background: var(--color-heading);
            color: #fff;
            border: none;
        }

    now we set the changes for desktop version: 

        @media screen and (min-width: 1024px) {
            .btn {
                font-size: 1.5rem;
            }
        }
________________________________________________________
16- Inputs
    we have a special input componenet that contains a button (search).
    in this lesson we implement a basic input componenet.
    next we combine it with a button element (input groups).

        .input {
            padding: 1.5rem 3.5rem;
            /* border is temporarily added. later replaced with shadow */
            border: 1px solid #ccc;
            border-radius: 40px;
            font-size: 2rem;
            outline: 0;
            color: var(--color-heading);
        }

        ::placeholder{
            color: #ccc;
        }

        @media screen and (min-width: 1024px) {
            .input {
                font-size: 1.5rem;
            }
        }
________________________________________________________
17- Input Groups
    our input componenet is ready. now we put button inside it.
    it is a <div> with shadow that contains an input and a button.

        <div class="input-group">
        <input type="text" class="input" placeholder="Enter domain name here" />
        <button class="btn btn--accent">Search</button>
        </div>

    in this form if we move button to up, it will appear on left side.

        <div class="input-group">
        <button class="btn btn--accent">Search</button>
        <input type="text" class="input" placeholder="Enter domain name here" />
        </div>

    or we can replace it with an icon.

    <div class="input-group">
      <input type="text" class="input" placeholder="Enter domain name here" />
      <span class="icon-container">
        <svg class="icon icon--primary">
          <use xlink:href="images/sprite.svg#search"></use>
        </svg>
      </span>
    </div>

    this is the benefit of defining items in isolation.
    this is called the BOTTOM UP approach.
        it is a Components first approach.

    in contrast we have TOP DOWN approach.
        it is a Page first approach.
        troubleshooting is hard.
        BAD-PRACTICE 

    now we style the div. 

        .input-group {
            border: 1px solid var(--color-border);
            border-radius: var(--border-radius) ;
            display: flex;
        }

        .input-group .input {
            border: 0;
            flex-grow: 1;
            padding: 1.5rem 1rem; #for reducing space between text and field.
        }

        .input-group .btn--accent {
            margin: 4px;
        }
________________________________________________________
18- Cards
    now we want to implement a card componenet.
        *round corners
        *header
        *body
        *
    
    first we define the card in the markup:
        <div class="card">
        <header class="card__header">Card Title</header>
        <div class="card__body">
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Distinctio,
            nostrum?
        </div>
        </div>
    
    now we build the basic structure:
        .card {
            border-radius: 7px;
            box-shadow: 0 0 20px 10px #f3f3f3;
            overflow: hidden; #to bring round corners back after styling header.
        }

        .card__header, .card__body {
            padding: 2rem 3rem;
        }

    now we build the skin:
        .card--primary .card__header {
            background: var(--color-primary);
            color: #fff;
        }

        .card--secondary .card__header {
            background: var(--color-secondary);
            color: #fff;
        }

    next we will combine the card with a badge, a list and a button to create a plan card.
________________________________________________________
19- Plans
    we call this whole complex, a plan componenet.
    a plan contains a card component with: 
        *text & badge in header
            name of the plan : Entry
            the price:$14
            billing cycle: month
            a badge 
            a description.
        *a list
        *a button

    adding header and body to the markup:
        <dvi class="plan">
            <div class="card card--primary">
            <header class="card__header">
                <h3 class="plan__name">Entry</h3>
                <span class="plan__price">$14</span>
                <span class="plan__billing-cycle">/month</span>
                <span class="badge badge--secondary badge--small"> %10 OFF </span>
                <span class="plan__description">Easy start on the cloud</span>
            </header>
            <div class="card__body">
                Lorem ipsum dolor sit amet consectetur adipisicing elit. Distinctio,
                nostrum?
            </div>
            </div>
    
    style:
        .plan__name {
            color: #fff;
            margin: 0;
            font-weight: 600;
            font-size: 2.4rem;
        }

        .plan__price {
            font-size: 6rem;
        }

        .plan__billing-cycle {
            font-size: 2.4rems;
            font-weight: 300;
            opacity: 0.7; #making text softer
            margin-right: 1rem #space with badge
        }

        .plan_description {
            display: block;
        }

    now we work on the badge.
    the badge uses the same bg color with card__header. so its lost.

        .card--primary .badge--primary {
            background: #126de4;
        }
        .card--secondary .badge--secondary {
            background: #02cdf1;
        }
    
    description:

        .plan__description {
            display: block;
            font-size: 2rem;
            font-weight: 300;
            letter-spacing: 1px;

        }
    
    now we are done with card header. 
    we want to style the body. we need a list and a outline button.
    we grab the templates from componenets folder:

            <ul class="list list--tick">
              <li class="list__item">Unlimited Websites</li>
              <li class="list__item">Unlimited Bandwidth</li>
              <li class="list__item">100 GB SSD Storage</li>
              <li class="list__item">3 GB RAM</li>
            </ul>
            <button class="btn btn--outline">Buy Now</button>
    
    after that we compare card with psd template and make final changes:
            .list--tick {
                letter-spacing: 1px;
            }

            .list--tick .list__item {
                margin-bottom: 2rem;
            }

    now we set the changes for desktop version.
    we have done the share for lists and buttons before.
    so we have to only adjust the header font sizes:

        @media screen and (min-width: 1024px) {
            .plan__name {
                font-size: 1.4rem;
            }
            .plan__price {
                font-size: 5rem;
            }
            .plan__billing-cycle {
                font-size: 1.6rem;
            }
            .plan__description {
                font-size: 1.7rem;
            }
        }

    our plans look in a good shape.
    next we want to add the popular badge to primary card.
________________________________________________________
20- Popular Badge
    all we have to do:
        insert image in the header 
        use Absolute positioning for positioning the header
        the best way is to add a class to the popular card.
        so the badge will be a part of that card:

        .plan--popular .card__header::before {
            content: url(../images/popular.svg);
        }

    now we can easily style this:
    the badge should be positioned absolutely. so the parent must be relative:
    
        .plan--popular .card__header {
            position: relative;
        }

        .plan--popular .card__header::before {
            content: url(../images/popular.svg);
            width: 40px;
            display: inline-block;
            position: absolute;
            top: -6px;
            right: 5%;
        }
________________________________________________________
21- Media Objects
    the user interface pattern is officially called a media Object.
    we have an icon on the left
    on the right we have a title followed by some text.
    this pattern is seen on any social networking platform.

    so we have a div that contains two elements: image and body:

        <div class="media">
            <div class="media__image"></div>
            <div class="media__body"></div>
        </div>

    for the image we use the icon template:

        <svg class="icon icon--primary">
        <use xlink:href="images/sprite.svg#settings"></use>
        </svg>

    in the psd design, we have <h2> above the media Object.
    so we use <h3> for thtile:

        <div class="media">
        <div class="media__image">
            <svg class="icon icon--primary">
            <use xlink:href="images/sprite.svg#snap"></use>
            </svg>
        </div>
        <div class="media__body">
            <h3 class="media__title">Easy Start & Managed Updates</h3>
            <p>
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Molestiae,
            reprehenderit?
            </p>
        </div>
        </div>

    now we set the changes for desktop version.

        @media screen and (min-width: 1024px) {
            .media__title {
                font-size: 1.8rem;
            }
            .media__body {
                font-size: 1.8rem;
            }
        }
    
    now the structure is ready.
    so the bg is black but we'll implement that when designing container section.
    next we will implement qoute component.
________________________________________________________
22- Quotes
    should we include the image in the quote? NO!
    imagine we want to have articles on this website and we have quotes from others.
    we dont necesserily need to put an image.
        *some text
        *Name of the person
        *orgaanization
    after that we combine it with an image and put it inside a card and create a testimonial componenet.
    we can use <q> or <blockquote> which is an inline element:

        <blockquote class="quote">
        <p>
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Ea tempora
            maiores facilis rem alias ipsum, quasi accusantium dolores labore nobis.
        </p>
        </blockquote>

    styling the body:

        .quote {
            font-size: 3rem;
            font-style: italic;
            columns: var(--color-body-darker);
            line-height: 1.3;
        } 

    it is better to store the color in color palette as the darker version of body text.
    we want to add "" to code. so we dont have to remember every time we put a quote.
    we use Pseudo element Selector to add content before and after the content of p element:

        .quote__text::before {
            content: open-quote;
            font-size: 4rem;
        }
        .quote__text::after {
            content: close-quote;
            font-size: 4rem;
        }
    
    now we build and style the name of the person.
    it is a media pattern:
        left: image
        right: title and text 
    so we reuse our media componenet.
    and then style the name and company and the line according to psd:

        .quote__author {
            font-family: Montserrat , Arial, Helvetica, sans-serif;
            font-size: 3rem;
            font-weight: 600;
            font-style: normal;
            margin-bottom: 0;
        }

        .quote__company {
            font-style: normal;
            color: var(--color-heading);
            opacity: 0.4;
        }

        .quote__line {
            position: relative;
            bottom: 10px
        }

    now we set the changes for desktop version.
        @media screen and (min-width: 1024px) {
            .quote {
                font-size: 2rem;
            }
            .quote__author {
                font-size: 2.4rem;
            }
            .quote__company {
                font-size: 1.6rem;
            }
        }
________________________________________________________
23 - Grids
    there are many places on this page whre we have two column grid. 
    on mobile version we always have a single column grid. 
    for demo:

        <div style="height: 100px; background: gold"></div>
        <div style="height: 100px; background: darkblue"></div> 

    this divs are placed vertically. this is exactly what we want for mobile.
    for 2 col grid starting from tablet we want to put them side by side:

        @media screen and (min-width: 768px) {
            .grid--1x2 {
                grid-template-columns: repeat(2, 1fr);
            }
        }
    
    for 3 col grid on desktops:

        @media screen and (min-width: 1024px) {
            .grid--1x3 {
                grid-template-columns: repeat(3, 1fr);
            }
        }
________________________________________________________
24- Testimonials
    now we have all the buid in blocks to build the testimonial componenet.
    we start with a card. inside the card we have :
            *a 1x2 grid. 
            *image
            *quote

    first we add image and a experimental div to test the function:

        <div class="card">
            <div class="grid grid--1x2">
                <img src="images/testimonial.jpg" alt="A happy, smiling customer" />
                <div style="height: 100px; background: gold"></div>
            </div>
        </div>

    we see that image size is fixed so in different screens the distribution of columns will not be equal.
    we should make this image responsive:

        .testimonial {
            padding: 3rem;
        }

        .testionial__image {
            width: 100%;
        }
    
    next we add the red icon. it has fixed position.
    so we use absolute positioning.
    we put image and icon inside a container which has relative position.
    then apply absolute positioning on the icon:

        .testimonial__image > .icon-container {
            position: absolute;
            top: 3rem;
            /* 32px is half of 64px (width of icon-container) to position icon in middle */
            right: -32px; 
        }
    
    to set the icon color: 
    we define another skin to icon container componenet:

        .icon-container--accent {
            background: var(--color-accent);
        }

        .icon--white {
            fill: #fff;
        }

        .icon--small {
            width: 30px;
            height: 30px;
        }

    then we use it in our testimonial.

    the last part is adding the quote componenet instead of experimental div:
    we just have to copy the quote componenet!
    it seems the font size is too big on middle screen (768px).
    and the left margin of qoute seems less than psd markup.
    we can solve it by defining a @media:

        @media screen and (min-width: 768px) {
            .testimonial .quote, .testimonial .quote__author {
                font-size: 2.4rem;
            }
            .testimonial .quote {
                margin-left: 6rem ;
            }
        }
________________________________________________________
25- Callouts
    it looks like a card. but there are differences:
        *doesn't have shadow
        *entire componenet has bg
    instead of changing card, it is safer to define another componenet.
    its a 2 column grid on desktop 
    and one column grid on mobile. 
    we define the componenet first:

        <div class="callout callout--primary">

    inside the component we define the grids for desktop and mobile:

        <div class="grid grid--1x2"></div>
    
    insidethe grid we have two items:
        *heading and text
        *button
        
        <div class="callout callout--primary">
        <div class="grid grid--1x2">
            <h3>Ready to get started?</h3>
            <p>
            Lorem ipsum dolor, sit amet consectetur adipisicing elit. Numquam
            suscipit est harum veniam ab iusto aperiam magnam assumenda nobis
            similique?
            </p>
            <a href="" class="btn btn-secondary">Get started</a>
        </div>
        </div>

    then we style it:
    
        .callout {
            padding: 4rem;
            border-radius: 5px;
        }

        .callout--primary {
            background: var(--color-primary);
            color: #fff;
        }
        .callout__heading{
            color: #fff;
            margin-top: 0;
            font-size: 3rem;
        }

        .callout .btn{ 
            justify-self: center;
            align-self: center;
        }
    
    it is pretty close. but here the button have more horizontal padding.
    OOP says we should seperate content from container.
    so we define a reusable skin for buttons in BUTTONS section:

        .btn--stretched {
            padding-left: 6rem;
            padding-right: 6rem;
        }
    
    the difference for the desktop version is 
        text stretching to right
        left align text.
        button left margin
        
        @media screen and (min-width: 768px) {
            .callout .grid--1x2 {
                grid-template-columns: 1fr auto ;
            }
            .callout__content {
                text-align: left;
            }
            .callout .btn {
                justify-self: start;
                margin: 0 2rem;
            }
        }
________________________________________________________
26- Collapsibles
    in the footer we have Collapsible sections. it has to parts:
        *header
            <h2> and an icon 
        *body area 
    when clicking on header the body expands
    HTML:
        <div class="collapsible">
        <header class="collapsible__header">
            <h2 class="collapsible__heading">Item1</h2>
            <span class="icon-container">
            <svg class="icon icon--primary">
                <use xlink:href="images/sprite.svg#chevron"></use>
            </svg>
            </span>
        </header>
        <div class="collapsible__content">
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Veniam
            doloribus aspernatur iure laborum sit aliquid a delectus omnis quos
            neque.
        </div>
        </div>

    CSS:
    To position the icon horizontally and push it to the right side:

        .collapsible__header {
            display: flex;
            justify-content: space-between;
        }
    
    To remove the margin of heading from the top of the container and set the font size from psd:

        .collapsible__heading {
            margin-top: 0;
            font-size: 3rem;
        }
    
    in this implementation the collapsible has expandedd.
    we want the default be collapsed:
    **first: turn the chevron so it points to the right.
        give a new class to icon:

            <svg class="icon icon--chevron collapsible__chevron">
        
        rotate the icon 90deg counter clock:

            .collapsible__chevron {
                transform: rotate(-90deg);
            }

    **then we need to hide the content area.
        we style the collapsible__content class of collapsible:

            .collapsible__content {
                display: none;
            }
    
    now we need to implement expandency:
    we set a new class to our collapsible for expanded mode:

    <div class="collapsible collapsible--expanded">

    we define 2 rules for icon and content in expanded mode:

            .collapsible--expanded .collapsible__chevron {
                transform: rotate(0);

            }

            .collapsible--expanded .collapsible__content {
                display: block;
            }

    we're almost done. 
    now we have to use JavaScript to dinamically insert the class collapsible--expandedd
    when the user clicks on the icon. 
    we add the js folder to the project. 
    later in js tutorial we'll learn how to implement this code.

        const collapsibles = document.querySelectorAll(".collapsible");
        collapsibles.forEach((item) =>
        item.addEventListener("click", function () {
            this.classList.toggle("collapsible--expanded");
        })
        );

    in this code, the js uses a query for all .collapsible classes in html file.
    and with a forEach method, it will iterate through the itmes.
    then using the .addEventListener method, it will register a function to be called 
    when the item is "click"ed. 
    what is that function? 

        this.classList.toggle("collapsible--expanded");
    
    the code is this. it means if:
        the class collapsible--expanded exists: remove
        the class collapsible--expanded doesn't exists: add 

    how to add js file to html file:
        we add it at the end of the html document.
        the reason is we dont want the code hold a rendering for our page.
        we want the page quickly render and after that browser is going to download and execute the js file.
        so we add it before <body>:
                <script src="js/main.js"></script>
        
    now we want the transition to be smoother when clicked:
    
        .collapsible__chevron {
            transform: rotate(-90deg);
            transition: transform 0.3s;
        }
    
    if we want to animate the content area, 
    because we have set the display to none and block, we cant do it.
    
    TRICK: instead of display:none; , we use max-height: 0 and overflow: hidden; 

        .collapsible__content {
            max-height: 0;
            overflow: hidden;
        }
    
    when user expands, we change the properties.
    we set the max-height: 100vh ;
    so it stretches to 100% of viewport. 
    but as we use max-height instead of height, it will not be stretched beyond its content:

        .collapsible--expanded .collapsible__content {
            max-height: 100vh;
        }
    
    now we can set the transition we want: 

        .collapsible__content {
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.3s
        }
    
    if we want a fade out effect:

        .collapsible__content {
            max-height: 0;
            overflow: hidden;
            opacity: 0;
            transition: all 0.3s
        }

        .collapsible--expanded .collapsible__content {
            max-height: 100vh;
            opacity: 1;
        }
    
    now we have the structure for the collapsible.
    later we can style the spacing between them, dark bg of the footer and other features.
________________________________________________________
27- Blocks
    on the page we have multiple blocks for multiple sections.
    semantically we can implement a block using section element.

        <section class="block">
        <h2>Heading</h2>
        <p>
            Lorem ipsum dolor sit amet consectetur, adipisicing elit. Officia atque
            porro sint reiciendis optio quam, aspernatur harum rem ex labore?
        </p>
        </section>

    temporarily we give the block a border to see things more clearly:

        .block {
            padding: 6rem 2rem;
            border: 2px solid red;
        }
    
    now we see the heading has extra margin on the top:

        .block__heading {
            margin-top: 0;
        }
    
    now we need a variation of this block named baock--dark: 

        <section class="block block--dark">
        <h2 class="block__heading">Heading</h2>
        <p>
            Lorem ipsum dolor sit amet consectetur, adipisicing elit. Officia atque
            porro sint reiciendis optio quam, aspernatur harum rem ex labore?
        </p>
        </section>

        .block--dark {
            background: #000;
            color: #7b858b;
        }
    
    the heading in the dark--block is not white:

        .block--dark .block__heading {
            color: #fff;
        }
    
    some of these blocks are skewed to right or left.
    the prefered solution is clippath. in part 2 Clipping Images.
    https://bennettfeely.com/clippy
    we create a custom polygon in this site.
    we copy the generated polygon and paste it to new rule called block--skewed-right and left:

        .block--skewed-right {
            clip-path: polygon(0% 0%, 100% 0%, 100% 100%, 0 80%);
        }

    for the left:

        .block--skewed-left {
            clip-path: polygon(0% 0%, 100% 0%, 100% 80%, 0 100%);
        }
    
    add to markup:
        <section class="block block--dark block--skewed-right">
    
    because of Clipping we have uneven padding. 
    so we shoud apply an extra paddings to skewed blocks.

        .block--skewed-right {
            padding-bottom: 10rem;
            clip-path: polygon(0% 0%, 100% 0%, 100% 100%, 0 80%);
        }
    
    with this approach if we want to change the padding for all blocks, it messes up our code.
    we can define an isolated variable for block class:

        .block {
            --padding-vertical: 6rem;
            padding: var(--padding-vertical) 2rem;
            border: 2px solid red;
        }
    
    then we set it to skewed version and use the calc function to change it:
        .block--skewed-right {
            padding-bottom: calc(var(--padding-vertical) + 4rem);
            clip-path: polygon(0% 0%, 100% 0%, 100% 100%, 0 80%);
        }

    with this approach we dont have to remember to update the body padding.
    -----------------------------------------------------
    now we jump to the next block. 
    the text on the heade part is center aligned.
    if we put the text-align prop in the block rule, then every component added to this section
    is going to be centered.
    we just want the header and text below it be centered.
    so we wrap them inside a <header>:

        <section class="block">
        <header class="block__header">
            <h2 class="block__heading">Heading</h2>
            <p>
            Lorem ipsum dolor sit amet consectetur, adipisicing elit. Officia
            atque porro sint reiciendis optio quam, aspernatur harum rem ex
            labore?
            </p>
        </header>
        </section>
    
    and then style it to the center:

        .block__header {
            text-align: center;
        }

    when we change the screen size, the block changes too. 
    in psd design its clear that the content is contained in container 1100px wide.
    so if we have a wide screen, out content is not gonna change.
    it makes it easier to read:

        .container {
            max-width: 1140px;
        }
    
    this is a reusable class that we can apply anywhere. 
    markup:
        <section class="block container">
    
    for dark blocks we only want to limit the content to the container not the whole bg.
    so we wrap the content to a div with a class of container:

        <section class="block block--dark block--skewed-right">
        <div class="container">
            <h2 class="block__heading">Heading</h2>
            <p>
            Lorem ipsum dolor sit amet consectetur, adipisicing elit. Officia
            atque porro sint reiciendis optio quam, aspernatur harum rem ex
            labore?
            </p>
        </div>
        </section>
    
    we also set the margin of the container to bring the container to center horizontally:

        .container {
            max-width: 1140px;
            margin: 0 auto;
        }
    
    the implementation of the block is finished.
    now we can remove the red border and make changes for wider screens:

        @media screen and (min-width: 1024px) {
            .block {
                font-size: 1.8rem;
            }
        }
________________________________________________________       
28- Navigation Bars
    the implementation of nav bar 
    *mobile 
        logo on left
        a toggler button on right 
            by clicking on toggler the mini item should appear vertically
    *desktop
        logo on left
        nav bar as a horizontal list on right 
    
    so in this nav bar we have:
        logo
        toggler button
            unordered list
    
    in terms of behaviour this nav bar is a collapsible component.
    so we dont have to write another js code. we can reuse it.
    this is another benefit of component based approach.
    first: adding the logo file to the project.

    markup:
    inserting logo:
        <nav class="nav">
            <a href="/"><img src="images/logo.svg" alt="logo"></a>
        </nav>
    
    inserting icon:
        <nav class="nav">
            <a href="/"><img src="images/logo.svg" alt="logo" /></a>
            <svg class="icon icon--white">
                <use xlink:href="images/sprite.svg#menu"></use>
            </svg>
        </nav>
    
    inserting unordered list:
        <nav class="nav">
            <a href="/"><img src="images/logo.svg" alt="logo" /></a>
            <svg class="icon icon--white">
                <use xlink:href="images/sprite.svg#menu"></use>
            </svg>
            <ul class="list">
                <li><a href="#">Hosting</a></li>
                <li><a href="#">VPS</a></li>
                <li><a href="#">Domain</a></li>
                <li><a href="#">Pricing</a></li>
            </ul>
        </nav>
    
    now we shoud set bg color of nav to black and enable flex to lay out horizontally.
    we set the justify content to space between so first and last items push to sides:
        .nav {
            background: #000;
            display: flex;
            justify-content: space-between;
            padding: 1rem;
        }

    now we want to push the list to second line.
    enable flex-wrap for nav & set nav__list width to 100%:
        <ul class="list nav__list">

        .nav {
            flex-wrap: wrap;
        }

        .nav__list {
            width: 100%;
        }
    
    color of the list and padding before and between elements:
        <li class="nav__item">

        .nav__item {
            padding: 0.5 2rem;
        }

    for the color we have to assign it to link item because links have their own color.
    we can define new class like nav__links or we can use direct child CSS styling:

        .nav__item>a {
            color: #d2d0db;
        }
    
    border for nav__item:
        .nav__item {
            padding: 0 2rem;
            border-bottom: 1px solid #222;
        }
    
    hover effect and transition:
        .nav__item>a {
            color: #d2d0db;
            transition: color 0.3s;
        }
        .nav__item>a:hover {
            color: #fff;
        }
    
    we want the icon initially have less opacity and when expanded we want it brighter:
        <svg class="icon icon--white nav__toggler">

        .nav__toggler {
            opacity: 0.5;
        }
    
    so we neef to give the nav an extra collapsible class.
    and a collapsible__content class to the list to make it hidden in default:

    <nav class="nav collapsible">
    <ul class="list nav__list collapsible__content">

    now when clicking the js code kicks in! 

    there is an extra space below the navbar. we want to remove it.
    when inspecting we see there is 24px of margin above and below the list.

        .nav__list {
            margin: 0;
        }

    bringing the icon to middle and remove vertical padding to reduce the extra space:
        .nav {
            padding: 0 1rem;
            align-items: center;
        }
    
    now we want the icon be brighter and add a shadow when clicking:
        <nav class="nav collapsible collapsible--expanded">

        .nav.collapsible--expanded .nav__toggler {
            opacity: 1;
            box-shadow: 0 0 0 3px #666;
            border-radius: 5px;
        }
    
    the .nav.collapsible--expanded specifity is double class Selector to be more specific.

    for smooth transition for box shadow and make the icon clickable:
        .nav__toggler {
            opacity: 0.5;
            transition: box-shadow 0.3s;
        }
    
    the mobile version is finished.
    -----------------------------------------------------
    for desktop:
    we will write a @media to hide the toggler and make the list horizontal.

        @media screen and (min-width: 768px) {
            .nav__toggler {
                display: none;
            }
            .nav__list {
                width: auto;
                display: flex;
                font-size: 1.6rem;
                max-height: 100&;
                opacity: 1;
            }
            .nav__item {
                padding-right: 4rem;
                border: 0;
            }
        }

    initially the list is invisible in desktop.
    so we add the max-height and opacity props to nav__list.

    BONUS: fixing the logo positioning to be in the center.

      <a class="nav__brand" href="/"
        ><img src="images/logo.svg" alt="logo"
      /></a>

        .nav__brand {
            transform: translateY(5px)
        }
________________________________________________________
29- Hero
    we're going to build the hero componenet also called banner.
    we have:
    on desktop:
        block--dark block--skewed-left 
            grid--1x2
                content
                image 
    on mobile:
        block--dark block--skewed-left 
            grid--1x1
                content

    DESKTOP
    so we have all the Essential componenets to build this bigger componenet.
    first: adding the banner image to the project.

    inserting block and grid:
    we put the grid in the pre defined container to limit it to 1140px:

        <section class="block block--dark block--skewed-left">
            <div class="container grid grid--1x2"></div>
        </section> 

    inserting grid 1 elements:

        <section class="block block--dark block--skewed-left">
            <div class="grid grid--1x2">
                <div class="hero_content">
                    <h1>Cloud Hosting for Pros</h1>
                    <p>Deploy your websites in less than 60 seconds.</p>
                    <a href="#" class="btn btn--accent btn--stretched">Get started</a>
                </div>
            </div>
        </section>

    inserting grid 2 image:
        <section class="block block--dark block--skewed-left">
            <div class="grid grid--1x2">
                <div class="hero_content">
                    <h1>Cloud Hosting for Pros</h1>
                    <p>Deploy your websites in less than 60 seconds.</p>
                    <a href="#" class="btn btn--accent btn--stretched">Get started</a>
                </div>
                <img src="images/banner.png" alt="Banner" />
            </div>
        </section>   
    
    now that we have added all needed elements, we can start styling:
    <h1> color and space between lines:
    in typography we set a prop to headers:

        h1, h2, h3 {
            line-height: 1.1;
        }
    
    for color:
        <h1 class="block__heading">Cloud Hosting for Pros</h1>

    now we work on the text:
        <p class="hero__tagline">Deploy your websites in less than 60 seconds.</p>

        .hero__tagline {
            font-size: 2rem;
            color: #b9c3cf;
            letter-spacing: 1px;
            margin-top: 2rem;
            margin-bottom: 5rem;
        }
    
    removing the horizontal scrolling:
            <img class="hero__image" src="images/banner.png" alt="Banner" />

            .hero__image {
                width: 100%;
            }
    
    MOBILE 
    the grid takes care of 1 column grid. 
    we have to work on the alignment of the heading and text to be centered.
    like the block section, we have to assume the header and text here are our header of block componenet.
        <div class="hero_content ">  >>>>>>   <header class="block__header hero_content ">

    the order of classes is from more generic to specific.

    in mobile version the angle of clippath is too much comared to psd design.
    we define a rule for hero and put the right poligon there:
        <section class="block block--dark block--skewed-left hero">

        .hero {
            clip-path: polygon(0% 0%, 100% 0%, 100% 90%, 0 100%);
        }
    
    mobile version is done.
    lets customize for wider screens.
    text alignment of content.
    content vertically in the middle.

        @media screen and (min-width: 768px) {
            .hero {
                padding-top: 0;
            }
            .hero__content {
                text-align: left;
                align-self: center;
            }
        }
________________________________________________________
30- Optimizing Images
    reducing image sizes based on the sized used by the website.
    example: banner.png is 1532px width by default. 900kb
    on desktop we only need half of 1140px : 570px
    on mobile it isnt going to stretch more than 500px.
    STRATEGY:   serve a 570px wide in range
                let the browser do small resizing
                provide a 2x version for high density screens (RETINA)
                3x: original is 1532px by default. enlarging to 1710px doesnt make sense.
                after saving the images with optimized sizes, we can convert them to WebP
                https://cloudconvert.com 
                now the file siez has reduced to 43kb
                we change the markup. wrap the img in a <picture> and define a source set:

        <picture>
          <source
            type="image/webp"
            srcset="images/banner.webp 1x, images/banner@2x.webp 2x" />
          <source
            type="image/png"
            srcset="images/banner.png 1x, images/banner@2x.png 2x" />
          <img class="hero__image" src="images/banner.png" alt="Banner"
        /></picture>
________________________________________________________
31- Domain Block
    next we are going to make the second part of the page which is below hero. 
    we call it the domain block. we have:
        Heading
        some text
        search box
        domain prices 
    we dont include the cards. they present our plans. 
    plans and domain lookup are 2 completely different concepts.

    inserting heading and text:
    <section class="block container">
      <header class="block__header">
        <h2>Starting at $9 per month</h2>
        <p>
          Lorem ipsum dolor sit amet consectetur adipisicing elit. Iusto, rem.
        </p>
      </header>
    </section>

    inserting an input group for searchbox and search icon:
        <button class="btn btn--accent">
          <svg class="icon icon--primary icon--small">
            <use xlink:href="images/sprite.svg#search"></use>
          </svg>
          Search
        </button>

    now we want to size the icon. the best place is the button section.
    because in future we may want another button with an icon. 
    so we make this reusable:

        .btn .icon {
            width: 2rem;
            height: 2rem;
            margin-right: 1rem;
            vertical-align: middle; #make the icon come to middle of text.
        }

    now we want the add the shadow on the input group.
    one solution is to define a utility class for adding shadows:
    the more we use this kind of utility classes, the more our code is going to talk about styling.
    there are some frameworks like Tailwind which are based on the concept of utility-first/atomic
    these frameworks has various utilities:
        *box-shadow
        *border
        *font
        *text-align
        *etc

    some people love them others hate them. it is optional.
    in this course we dont use utility class. 
    so for box-shadow we define a specific rule for this input instance:

        <section class="block container block-domain">

        .block-domain .input-group {
            box-shadow: 0 0 30px 20px #e6ebee;
            border: 0;
            margin-top: 3.5rem; #space between input-group and text
        }
    
    now we add the domain prices:
    mobile:
        the items of the list are layed out in rows and columns.
        so we should use a grid to define them:

            <ul class="list block-domain__prices"></ul>
        
        on mobile we have 3x2 grid: 

        .block-domain__prices {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            grid-template-rows: repeat(2, 6rem);
        }
    
        now we can add the items. and wrap one of them in a badge
      <ul class="list block-domain__prices">
        <li><span class="badge badge--secondary">.com $9</span></li>
        <li>.sg $10</li>
        <li>.space $11</li>
        <li>.info $14</li>
        <li>.net $10</li>
        <li>.xyz $10</li>
      </ul>

        font size and text alignment to center:
        .block-domain__prices {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            grid-template-rows: repeat(2, 6rem);
            font-size: 2rem;
            font-weight: 600;
            justify-items: center;
        }

    the mobile version is ready.
    now we set the settings for wider screens:

        @media screen and (min-width: 768px) {
            .block-domain__prices {
                grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
            }
        }
    
    the auto-fit is a prettier prop to assign every line to number of elements. 
    with this approach if tomorrow we add another item to the list,
    this code will calculate and make the necessery changes to fit them in one line.

    as we see in standard version, the list and input-group are not taking the entire 
    width of the page. 
    by setting the max-width of this 2 elements to 700px and setting the horizontal margin to auto.

        .block-domain .input-group {
            margin: 4rem auto;
            max-width: 700px;
        }

        .block-domain__prices {
            max-width: 700px;
            margin: 0 auto;
        }
________________________________________________________
32- Plans Block
    hints: 
    desktop: 
        popular plan slightly larger
        hover: larger 
    
    inserting plans: 
    <section class="block container">
      <div class="grid grid--1x3">
        <div class="plan">
          <div class="card card--secondary">
            <header class="card__header">
              <h3 class="plan__name">Entry</h3>
              <span class="plan__price">$14</span>
              <span class="plan__billing-cycle">/month</span>
              <span class="badge badge--secondary badge--small"> %10 OFF </span>
              <span class="plan__description">Easy start on the cloud</span>
            </header>
            <div class="card__body">
              <ul class="list list--tick">
                <li class="list__item">Unlimited Websites</li>
                <li class="list__item">Unlimited Bandwidth</li>
                <li class="list__item">100 GB SSD Storage</li>
                <li class="list__item">3 GB RAM</li>
              </ul>
              <button class="btn btn--outline">buy now</button>
            </div>
          </div>
          </div>
          <div class="plan plan--popular">
          <div class="card card--primary">
            <header class="card__header">
              <h3 class="plan__name">Entry</h3>
              <span class="plan__price">$14</span>
              <span class="plan__billing-cycle">/month</span>
              <span class="badge badge--primary badge--small"> %10 OFF </span>
              <span class="plan__description">Easy start on the cloud</span>
            </header>
            <div class="card__body">
              <ul class="list list--tick">
                <li class="list__item">Unlimited Websites</li>
                <li class="list__item">Unlimited Bandwidth</li>
                <li class="list__item">100 GB SSD Storage</li>
                <li class="list__item">3 GB RAM</li>
              </ul>
              <button class="btn btn--outline">buy now</button>
            </div>
          </div>
        </div>
        <div class="plan">
          <div class="card card--secondary">
            <header class="card__header">
              <h3 class="plan__name">Entry</h3>
              <span class="plan__price">$14</span>
              <span class="plan__billing-cycle">/month</span>
              <span class="badge badge--secondary badge--small"> %10 OFF </span>
              <span class="plan__description">Easy start on the cloud</span>
            </header>
            <div class="card__body">
              <ul class="list list--tick">
                <li class="list__item">Unlimited Websites</li>
                <li class="list__item">Unlimited Bandwidth</li>
                <li class="list__item">100 GB SSD Storage</li>
                <li class="list__item">3 GB RAM</li>
              </ul>
              <button class="btn btn--outline">buy now</button>
            </div>
          </div>
      </div>
    </section>

    apply gap between plans. define a new class to section:
        <section class="block container block-plans">
        
        .block-plans .grid {
            gap: 4rem;
        }
    
    on mobile we dont want the plans get larger.
    so mobile version is done. 

    now we set the settings for wider screens.
    for 1024px it looks fine but for tablets the card strechens too wide.
    we want to make it a little smaller and put it right in the center.
    first for desktop:
    we have to define the hover and primary card enlargement.
    in PLANS:

        .plan--popular {
            transform: scale(1.1)
        }

        .plan {
            transition: transform 0.5s ease-out;
        }

        .plan:hover {
            transform: scale(1.05);
        }

        .plan--popular:hover {
            transform: scale(1.15);
        }
    
    now its time to make the necessery changes for wider screens:

        @media screen and (max-width: 1024px) {
            .block-plans {
                max-width: 500px;
                margin: 0 auto;
            }
            .plan--popular {
                transform: scale(1)
        }
        } 
    
    we're done with this componenet.
    save in a seperate file and upload a new version to the git.
________________________________________________________
33- Features Block
    we have a repetative pattern. 
        1x2 grid
            subcontent on one side
            image another side 
    this instance is repeated several times.
    so we are going to build the features pattern in this lesson.
    next we are going to add header and repeat this pattern to build the entire block.

    we use <article> for representing this componenet.
    we use <article> to represent any self contained piece of content. 
    each of the features (subcontent & image) are an article. 

    in the first article we have some elements:
        icon
        heading
        text
        link
    
    we wrap all these elements in a <div>

    <article class="grid grid--1x2 container">
      <div>
        <span class="icon-container">
          <svg class="icon icon--primary">
            <use xlink:href="images/sprite.svg#computer"></use>
          </svg>
        </span>
        <h3>Super Easy to Use</h3>
        <p>
          Lorem ipsum, dolor sit amet consectetur adipisicing elit. Vitae
          voluptatem veritatis est accusantium nesciunt necessitatibus
          repudiandae facilis. Reprehenderit, dicta eligendi!
        </p>
        <a href="#" class="link-arrow">Learn More</a>
      </div>
    </article>

    now we style the first column of the grid.
    space between the icon and the heading. (from top margin of the heading)

        <h3 class="feature__heading">Super Easy to Use</h3>

        .feature__heading {
            margin: 1rem 0;
        }

    now we add the image for column 2:
    after resizing and converting for better Optimizing:

      <picture>
        <source
          type="image/webp"
          srcset="images/easy.webp 1x, images/easy@2x.webp 2x" />
        <source
          type="image/jpg"
          srcset="images/easy@2x.jpg 1x, images/easy@2x.jpg 2x" />
        <img class="hero__image" src="images/easy.jpg" alt="easy to use"
      /></picture>

      now we style the second column of the grid:
      space between image and subcontent in mobile:

          <article class="grid grid--1x2 feature">

        .feature {
            gap: 4rem;
        }

    making the image responsive:
          <img class="hero__image" src="images/easy.jpg" alt="easy to use"/>

        .feature__image {
            width: 100%;
        }
    
    now we have build the componenet now we have to make several and put it in a block:

        <section class="block container">
            <articles>
        </section>
    
    vertical margins between features:

        .feature {
            margin: 12rem 0;
        }
    
    to change the order of columns alternately on wide screens:
    first: define a class for each <div> in <article>:
            <div class="feature__content">

    Then in @media we are going to target every second feature with Pseudo class Selector:

        @media screen and (min-width: 768px) {
            .feature:nth-of-type(even) .feature__content {
                order: 2;
            }
        }
    
    now we can add the heading and paragraph on the top:

    <section class="block container">
      <header class="block__header">
        <h2>Host on the Cloud to Keep Growing</h2>
        <p>
          Lorem ipsum dolor, sit amet consectetur adipisicing elit. Vel,
          similique?
        </p>
      </header>

    the space between first feature and header is very much.
    we can target it with Pseudo class Selector again:

        .feature:first-of-type {
            margin-top: 5rem;
        }
________________________________________________________
34- Showcase Block
    in this block we are Showcasing an aspect of the website.
    on mobile is very straightforward:
        1x1 grid
            image
            several media Objects
        on desktop:
        we should put the image (ipad image) in a way that:
            user sees a part of the image on smaller screen and part of image is not visible.
            this is without a horizontal scrolling.
            when widening the screen, the unvisible part becomes visible.
            implementing this is the tricky part of this section. 

            we are going to solve this problem step by step.
            first we add the section, header, image and a paragraph.
            after that we will replace the <p> with media Object:

    <section class="block block--dark block--skewed-right">
      <header class="block">
        <h2>User-Friendly Control Panel</h2>
      </header>
      <div class="container grid grid--1x2">
        <img src="images/ipad.png" alt="" />
        <p>
          Lorem ipsum dolor sit amet consectetur adipisicing elit. Eaque autem
          unde non vero explicabo! Nam possimus numquam minima beatae harum.
        </p>
      </div>
    </section>

        our <h2> is blue. instead of defining a new class, we can change the root style 
        for all <h> in dark blocks:
    
            .block--dark h1,
            .block--dark h2,
            .block--dark h3 {
                color: #fff;
            }

        first we have to address the responsiveness of the image in mobile version:

        <img class="block-showcase_image" src="images/ipad.png" alt="" />

            .block-showcase_image {
                width: 100%;
            }

        in wider screens we dont want the entire image on 1st column.
        in other words WE DONT WANT a responsive image.
        we want to show the image in actual size so part of it end up outside the screen. 

            @media screen and (min-width: 768px) {
                .block-showcase__image {
                    width: auto;
                }
            }

        with this implementation 1st column is very wide and 2nd column is squashed.
        we want to make sure each column is exactly taking 50% of its parent (container)
        so we redefine the column template of our grid for wider screens:

            <section class="block block--dark block--skewed-right block-showcase">
      
            @media screen and (min-width: 768px) {
                .block-showcase .grid {
                    grid-template-columns: 50% 50%;
                }
                .block-showcase__image {
                    width: auto;
                }
            }
        
        previously we had 1fr 1fr so the columns werent even. 
        now part of the image is under the text.
        we have to align this image to the right side of its column.
    
            @media screen and (min-width: 768px) {
                .block-showcase__image {
                    justify-self: end;
                }
            }

        when expanding the browser, the grid gets wider but image gets wider too. 
        this is not what we want.
        our image never should grow larger than 700px.
        so we apply a max-width of 700px in @media.

            @media screen and (min-width: 768px) {
                .block-showcase__image {
                    width: auto;
                    max-width: 700px
                    justify-self: end;
                }
            }
    
        now the layout is working fine. 
        we should wrap this image in picture element to provide larger images.

        <picture class="block-showcase__image">
          <source
            type="image/webp"
            srcset="images/ipad.webp 1x, images/ipad@2x.webp 2x"
          />
          <source
            type="image/png"
            srcset="images/ipad.png 1x, images/ipad@2x.png 2x"
          />
          <img src="images/ipad.png" alt="" />
        </picture>

        now we have to assign the class of image to picture element.
        and in @media we have to make changes and target the image:

            @media screen and (min-width: 768px) {
                .block-showcase .grid {
                    grid-template-columns: 50% 50%;
                }
                .block-showcase__image {
                    justify-self: end;
                }
                
                .block-showcase__image > img {
                    width: auto;
                    max-width: 700px;
                }
            }
        
        the image is fine. so our first column is done.
        now we have to replace the <p> with media objects.
        we use <ul> and <li> instead of <div> to make our markup semantic. 
        so that the search engines can read our markup better. 

        <ul class="list">
          <li>
            <div class="media">
              <div class="media__image">
                <svg class="icon icon--primary">
                  <use xlink:href="images/sprite.svg#snap"></use>
                </svg>
              </div>
              <div class="media__body">
                <h3 class="media__title">Easy Start & Managed Updates</h3>
                <p>
                  Lorem ipsum dolor sit amet consectetur adipisicing elit.
                  Similique, dicta a repellat voluptatibus quos provident.
                  Ducimus ullam rerum error odit?
                </p>
              </div>
            </div>
          </li>
          <li>
            <div class="media">
              <div class="media__image">
                <svg class="icon icon--primary">
                  <use xlink:href="images/sprite.svg#growth"></use>
                </svg>
              </div>
              <div class="media__body">
                <h3 class="media__title">Staging, GIT & WP-CLI</h3>
                <p>
                  Lorem ipsum dolor sit amet consectetur adipisicing elit.
                  Similique, dicta a repellat voluptatibus quos provident.
                  Ducimus ullam rerum error odit?
                </p>
              </div>
            </div>
          </li>
          <li>
            <div class="media">
              <div class="media__image">
                <svg class="icon icon--primary">
                  <use xlink:href="images/sprite.svg#wordpress"></use>
                </svg>
              </div>
              <div class="media__body">
                <h3 class="media__title">Dynamic Caching & More</h3>
                <p>
                  Lorem ipsum dolor sit amet consectetur adipisicing elit.
                  Similique, dicta a repellat voluptatibus quos provident.
                  Ducimus ullam rerum error odit?
                </p>
              </div>
            </div>
          </li>
        </ul>

        * the list class applied to <ul> is for removing bullets and padding.

    looks like we are done. 
    BONUS TRICK: when selecting a text on dark bg, we want the color of text or selection to be changed:
    in Typography section:

        ::selection {
            background: var(--color-primary);
            color: #fff;
        }
________________________________________________________
35- Testimonials Block
    we have all the componenets we need to build this block. 
    we build a section and a header with a paragraph.
    after that we import the testimonial componenet earlier. 
    no further changes is needed.
    only we have extra space between the header and the card. 
    the best place to change the margin is in block__header 
    because we dont want to repeat this header anywhere else:

        .block__header {
            text-align: center;
            margin-bottom: 3rem;
        }
________________________________________________________
36- Footer
    the footer has a couple of challenging parts 
    in mobile:
        collapsibles
    in desktop:
        the collapsibles are always expanded.
    
    what we need to do is to write a @media query and hide the chevron and show the content area.

    other tricky part is the placement of the logo. 
    on desktop:
        placed in the first column.
    on mobile:
        placed in the last row.
    
    we'll add the callout section later.

    first we define a footer section with class of block, block--dark and footer.
    the block--dark class is for the text stylings.
    we set the bg color on footer class:

    <footer class="block block--dark footer"></footer>

        .footer {
            background: #232323;
        }
    
    inside the footer we have a container which is a grid. 
    on mobile: 1x1 grid 
    on desktop: 1x5 grid

    now we add the template for collapsible componenet. 

    <footer class="block block--dark footer">
      <div class="container grid">
        <section class="collapsible collapsible--expanded">
          <header class="collapsible__header">
            <h2 class="collapsible__heading">Item1</h2>
            <svg class="icon icon--white collapsible__chevron">
              <use xlink:href="images/sprite.svg#chevron"></use>
            </svg>
          </header>
          <div class="collapsible__content">
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Veniam
            doloribus aspernatur iure laborum sit aliquid a delectus omnis quos
            neque.
          </div>
        </section>
      </div>
    </footer>

    *we replace the <div> with <section> for collapsible so our code be more semantic.
    *because we have multiple sections in our footer. 

    we copy the added componenet 4 times. (we have 4 collapsibles.)
    we remove the <collapsible--expanded> to make the collapsibles hidden by default.

    now we should add some padding and a border between the items.
    so we assign a class to each section and style them:

    <section class="collapsible footer__section">

        .footer__section {
            padding: 2rem;
            border-bottom: 1px solid #393939;
        }

    making item titles uppercase and slightly thinner.
    it is better to assign a specific class and make the changes there:

    <h2 class="collapsible__heading footer__heading">Item4</h2>

        .footer__heading {
            text-transform: uppercase;
            font-weight: 600;
        }
    
    now lets add the logo and copyright index.
    after the last section we add another section with a class of footer__brand:

        <section class="footer__brand">
          <img src="images/logo.svg" alt="" />
          <p class="footer__copyright">Copyright 2020 Mosh Hamedani</p>
        </section>

    now we have to make it come to center and seperate from items:

        .footer__brand {
            margin-top: 5rem;
            text-align: center;
        }

    now we have to style the copyright notice:

        .footer__copyright {
            font-size: 2.1rem;
            color: #fff;
            opacity: 0.3;
        }
    
    we have the basics right. now we have to replace the paragraphs in items with lists.
    but first we work out for wider screens.
    we give to grid division a new class: 

        <div class="container grid footer__sections">

        @media screen and (min-width: 768px) {
            .footer__sections {
                grid-template-columns: repeat(auto-fit, minmax(10rem, 1fr));
            }
        }

    now the items are horizontal in wide screen. 
    we have to:
        *remove the chevrons
        *show the content of all sections. 

        @media screen and (min-width: 768px) {
            .footer .collapsible__chevron {
                display: none;
            }
            .footer .collapsible__content {
                max-height: 100%;
                opacity: 1;
            }
        }
    
    now we have to move the logo to the left side,
    bring the logo to top,
    add right margin to it,
    remove the border-bottom from items,
    reduce size of headings:

        @media screen and (min-width: 768px) {
            .footer__sections {
                grid-template-columns: repeat(auto-fit, minmax(10rem, 1fr));
            }

            .footer .collapsible__chevron {
                display: none;
            }

            .footer .collapsible__content {
                max-height: 100%;
                opacity: 1;
            }

            .footer__brand {
                margin-top: 1rem;
                margin-right: 4rem;
                order: -1;
            }

            .footer__copyright {
                font-size: 1.5rem;
            }

            .footer__section {
                border-bottom: 0;
            }

            .footer__heading {
                font-size: 1.6rem;
            }
        }
    
    now its time to replace the <p> with our hyperlink list.
        example:
    
            <ul class="list">
              <li><a href="#">Website Hosting</a></li>
              <li><a href="#">Free Automated Wordpress</a></li>
              <li><a href="#">Migrations</a></li>
            </ul>
        
        changing the default link color coming from the browser:

            .footer a {
                color: #777;
                transition: color 0.3s;
            }

            .footer a:hover {
                color: #fff;
            }
    
    only problem left is making logo responsive so the overlay not to happen. 

            .footer__brand img {
                width: 100%;
            }
        




