1- Introduction
    goal: build a imaginery cloud hosting website that is:
            * beautiful
            * responsive
            * fast
    we will start with a photoshop design markup.
    then we will hand code this design markup to build the site.
    this website will look great on all screen sizes.
    all What? How? Why? questions will be answered.
    it is best practice to become HTML/CSS expert.

    we will be able to:
        convert any photoshop design markup to a fast responsive website.
________________________________________________________
3- Prerequisites 
    *Semantic HTML elements
    *Basic CSS properties (colors, orders, shadows, fonts, etc.)
    *Selectors & Pseudo-Selectors
    *CSS box model
    *Absolute & Relative positioning
    *Flex & Grid layout
    *Media queries
    *Responsive Images
    *Transformations
    *Transitions
________________________________________________________
4- How to Take This Course
    *Providing needed tools
    *Setting up the project
        photoshop design markups and all supplementary materials (images, icons, fonts)
    *Coding Lessons
        in every lesson we will code a specific part of the design.
        we will learn tips & tricks along the way
        actively get involved:
            - code along
            - try to solve before hand
________________________________________________________
5- Tools You Need
    *Google Chrome browser
    *Chrome DevTools
    *Firefox
    *VSCode Editor 
    *HTML CSS Support extension
    *CSS Peak extension
    *Prettier extension
    *Highlight Matching Tag extension
    *TODO Highlight extension
    *Live Server extension
    *git from https://git-scm.com
________________________________________________________
6- Setting Up the Project
    *folder
    *index.html
    *normalize.css
    *styles.css
    *initialize a git repository
        database that tracks project history
    *install fonts
    *install photoshop.
________________________________________________________
7- Essential Photoshop Skills
    *size of fonts
    *measure distances
    *basic tools
________________________________________________________
8- Identifying the Components
    Components of moshified.com 
        logo 
        navbar
        banner (hero)
            heading
            text
            button
        input field
        badge
        inline list
        three column grid 
        cards
            badge
            list
            button
        icon round
        link
        two column grid 
        media componenets
            icon left
            heading right
            text right
        (quote componenet + image = card) : testimonial
        callout
        footer : lists
________________________________________________________
9- Color Palette
    before building componenets lets define our color palette. 
    color palette:
        *primary color :        blue            #2584ff
        *secondary color :      lighter blue    #00d9ff 
        *accent color :         orange          #ff3400
        *heading color :        dark purple     #1b0760
        *bodytext color :       light purple    #918ca4
    we use variables to define color palette so we can reuse them:
        :root {
        --color-primary: #2584ff;
        --color-secondary: #00d9ff;
        --color-accent: #ff3400;
        --color-heading: #1b0760;
        --color-body: #918ca4;
       }
________________________________________________________
10- Typography
    fonts and their sizes.
    as we are going to pick mobile first approach we always look at mobile version first.
    we add the links from https://fonts.google.com 

    then add rule for body font family and color:
        body {
            font-family: Inter, Arial, Helvetica, sans-serif;
            color: var(--color-bodys);
        }

        TRICK: h${Heading $}*3
                <h1>Heading 1</h1>
                <h2>Heading 2</h2>
                <h3>Heading 3</h3>
        
    setting headings color: 
        h1, h2, h3 {
            color: var(--color-heading);
        }
    
    setting font sizes:
        html {
            font-size: 62.5%;
        }

        body {
            font-size: 2.4rem;
        }

        h1 {
            font-size: 7rem;
        }

        h2 {
            font-size: 4rem;
        }

        h3 {
            font-size: 3rem;
        }

    setting line spacing:
        body {
            line-height: 1.5;
        }

    setting margin between heading and text:
    first we measure it in photoshop: 20px --> 2rem 
        h1, h2, h3 {
            margin-bottom: 1rem;
        }

        p {
            /* to avoid margin collapsing */
            margin-top: 0;
        }

    now we are done with mobile version. 
    so now we set the desktop version (1024px):
        @media screen and (min-width: 1024px) {
            body {
                font-size: 1.8rem;
            }
            h1 {
                font-size: 8rem;
            }
            h3 {
                font-size: 2.4rem;
            }
        }
    
    now we are done with typography. 
    next we want to build our first component.
________________________________________________________
11- Links
    first we implement the link componenet.
    learn more links are UPPERCASE.
    links have no underline. 
    We pick the font size and weight from mobile version of photoshop design.

        a {
            text-decoration: none;
        }

        .link-arrow {
            color: var(--color-accent);
            text-transform: uppercase;
            font-weight: bold;
            font-size: 2rem;
        }
    
    now we want the arrow after the link.
    we implement this with after Pseudo-Selector:
        we also can add icon instead of 

        .link-arrow::after {
            content: '-->';
            margin-left: 5px;
        }
    
    we want the arrow move to right in hover state:

        .link-arrow::after {
            transition: margin-left 0.15s;
        }

        .link-arrow:hover::after {
            margin-left: 10px;
        }
    
    now we set the changes for desktop version:

        @media screen and (min-width: 1024px) {
            .link-arrow {
                font-size: 1.5rem;
            }
        }
    it is better to add media queries after each section.
    to better organize the componenets it is better to make a folder and keep a sample of each componenet.
________________________________________________________
12- Badges 
    size wise:
        large Badges
        small Badges
    color wise:
        light blue
        darker blue
    
    so we are gonna apply (OOP CSS). 
    second principle of OOPCSS: seperating structure from skin.
    so we will have to class for badges:
        1 fonts and paddings

            .badge {
                border-radius: 20px;
                padding: 0.5rem 2rem;
                font-weight: bold;
                white-space: nowrap;
                color: #fff;
            }

        2 color and skin 

            .badge--primary {
                background: var(--color-primary);
            }

            .badge--secondary {
                background: var(--color-secondary);
            }

            .badge--small {
                font-size: 1.6rem;
            }

    now we set the changes for desktop version:

        @media screen and (min-width: 1024px) {
            .badge {
                font-size: 1.5rem;
            }
            .badge--small {
                font-size: 1.2rem;
            }
________________________________________________________
13- Lists
    *horizontal (inline) list for navbar
    *vertical list with green ticks for cards
    *vertical list footer 
    
        .list {
            list-style: none;   #getting rid of bullet
            padding-left: 0;    #getting rid of default left padding
            color: var(--color-heading);
        }
    
    now we give each list item a class by BEM:

        .list--inline .list__item {
            display: inline-block;
            margin-right: 2rem;
        }

    now we define rules for horizontal lists:

        .list--tick {
            list-style-image: url(../images/tick.svg);
            padding-left: 3rem;
        }

        .list--tick .list__item {
            padding-left: 0.5rem;
            margin-bottom: 1rem;
        }

    now we set the changes for desktop version:
        @media screen and (min-width: 1024px) {
            .list--tick .list__item {
                padding-left: 0;
            }
        }
________________________________________________________
14- Icons
    all icons are black and have transparent bg.
    in design markup the icons are blue.
    in some cases they're placed in circle and grey bg color.
    first we combine all the icon images in single image sprite.
    https://svgsprit.es
    then put the image in images folder.
    we copy the element to the markup from down below the page:

        <svg class="icon">
        <use xlink:href="#settings"></use>
        </svg>

    the <use> contains a link referring to the sprite file.
    #settings is the id of sprite file we have to reference the address:

        <svg class="icon">
        <use xlink:href=".images/sprite.svg#settings"></use>
        </svg>
    
    now we have loaded icon to the page. 
    we work on sizing and color of icon:

        .icon {
            width: 40px;
            height: 40px;
        }

        .icon--primary {
            fill: var(--color-primary)
        }
    
    now we work on the circle use case:
    we wrap the icon in a <span> with class of icon-container
    now we set the rules for icon-container:

        .icon-container {
            background: #f3f9fa;
            width: 64px;
            height: 64px;
            border-radius: 100%;
            display: inline-flex;
            justify-content: center;
            align-items: center;
        }
________________________________________________________
15- Buttons
    we have some variations for buttons.
    COLOR vise:
        *accent color buttons
        *outline buttons
            hover effect
        *
        secondary color button
    SIZE vise:
        *content fit 
        *container fit (block buttons)

    so we define our buttons. the hover effect of each button next to its normal state:

        .btn {
            border-radius: 40px;
            border: 0;
            /* to make the pointer into a hand */
            cursor: pointer;
            font-size: 1.8rem;
            font-weight: 600;
            margin: 1rem 0;
            padding: 2rem 3rem;
            text-align: center;
            text-transform: uppercase;
            white-space: nowrap;
        }

        .btn--primary {
            background: var(--color-primary);
            color: #fff;
        }

        .btn--primary:hover {
            background: #69aaff;
        }

        .btn--secondary {
            background: var(--color-secondary);
            color: #fff;
        }
        .btn--secondary:hover {
            background: #86edff;
        }
        .btn--accent {
            background: var(--color-accent);
            color: #fff;
        }

        .btn--accent:hover {
            background: #ff9073;
        }

        .btn--outline {
            /* to make it container size */
            width: 100%;
            display: inline-block;
            background: #fff;
            border: 2px solid var(--color-heading);
            color: var(--color-heading);
        }

        .btn--outline:hover {
            background: var(--color-heading);
            color: #fff;
            border: none;
        }

    now we set the changes for desktop version: 

        @media screen and (min-width: 1024px) {
            .btn {
                font-size: 1.5rem;
            }
        }
________________________________________________________
16- Inputs
    we have a special input componenet that contains a button (search).
    in this lesson we implement a basic input componenet.
    next we combine it with a button element (input groups).

        .input {
            padding: 1.5rem 3.5rem;
            /* border is temporarily added. later replaced with shadow */
            border: 1px solid #ccc;
            border-radius: 40px;
            font-size: 2rem;
            outline: 0;
            color: var(--color-heading);
        }

        ::placeholder{
            color: #ccc;
        }

        @media screen and (min-width: 1024px) {
            .input {
                font-size: 1.5rem;
            }
        }
________________________________________________________
17- Input Groups
    our input componenet is ready. now we put button inside it.
    it is a <div> with shadow that contains an input and a button.

        <div class="input-group">
        <input type="text" class="input" placeholder="Enter domain name here" />
        <button class="btn btn--accent">Search</button>
        </div>

    in this form if we move button to up, it will appear on left side.

        <div class="input-group">
        <button class="btn btn--accent">Search</button>
        <input type="text" class="input" placeholder="Enter domain name here" />
        </div>

    or we can replace it with an icon.

    <div class="input-group">
      <input type="text" class="input" placeholder="Enter domain name here" />
      <span class="icon-container">
        <svg class="icon icon--primary">
          <use xlink:href="images/sprite.svg#search"></use>
        </svg>
      </span>
    </div>

    this is the benefit of defining items in isolation.
    this is called the BOTTOM UP approach.
        it is a Components first approach.

    in contrast we have TOP DOWN approach.
        it is a Page first approach.
        troubleshooting is hard.
        BAD-PRACTICE 

    now we style the div. 

        .input-group {
            border: 1px solid var(--color-border);
            border-radius: var(--border-radius) ;
            display: flex;
        }

        .input-group .input {
            border: 0;
            flex-grow: 1;
            padding: 1.5rem 1rem; #for reducing space between text and field.
        }

        .input-group .btn--accent {
            margin: 4px;
        }
________________________________________________________
18- Cards
    now we want to implement a card componenet.
        *round corners
        *header
        *body
        *
    
    first we define the card in the markup:
        <div class="card">
        <header class="card__header">Card Title</header>
        <div class="card__body">
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Distinctio,
            nostrum?
        </div>
        </div>
    
    now we build the basic structure:
        .card {
            border-radius: 7px;
            box-shadow: 0 0 20px 10px #f3f3f3;
            overflow: hidden; #to bring round corners back after styling header.
        }

        .card__header, .card__body {
            padding: 2rem 3rem;
        }

    now we build the skin:
        .card--primary .card__header {
            background: var(--color-primary);
            color: #fff;
        }

        .card--secondary .card__header {
            background: var(--color-secondary);
            color: #fff;
        }

    next we will combine the card with a badge, a list and a button to create a plan card.
________________________________________________________
19- Plans
    we call this whole complex, a plan componenet.
    a plan contains a card component with: 
        *text & badge in header
            name of the plan : Entry
            the price:$14
            billing cycle: month
            a badge 
            a description.
        *a list
        *a button

    adding header and body to the markup:
        <dvi class="plan">
            <div class="card card--primary">
            <header class="card__header">
                <h3 class="plan__name">Entry</h3>
                <span class="plan__price">$14</span>
                <span class="plan__billing-cycle">/month</span>
                <span class="badge badge--secondary badge--small"> %10 OFF </span>
                <span class="plan__description">Easy start on the cloud</span>
            </header>
            <div class="card__body">
                Lorem ipsum dolor sit amet consectetur adipisicing elit. Distinctio,
                nostrum?
            </div>
            </div>
    
    style:
        .plan__name {
            color: #fff;
            margin: 0;
            font-weight: 600;
            font-size: 2.4rem;
        }

        .plan__price {
            font-size: 6rem;
        }

        .plan__billing-cycle {
            font-size: 2.4rems;
            font-weight: 300;
            opacity: 0.7; #making text softer
            margin-right: 1rem #space with badge
        }

        .plan_description {
            display: block;
        }

    now we work on the badge.
    the badge uses the same bg color with card__header. so its lost.

        .card--primary .badge--primary {
            background: #126de4;
        }
        .card--secondary .badge--secondary {
            background: #02cdf1;
        }
    
    description:

        .plan__description {
            display: block;
            font-size: 2rem;
            font-weight: 300;
            letter-spacing: 1px;

        }
    
    now we are done with card header. 
    we want to style the body. we need a list and a outline button.
    we grab the templates from componenets folder:

            <ul class="list list--tick">
              <li class="list__item">Unlimited Websites</li>
              <li class="list__item">Unlimited Bandwidth</li>
              <li class="list__item">100 GB SSD Storage</li>
              <li class="list__item">3 GB RAM</li>
            </ul>
            <button class="btn btn--outline">Buy Now</button>
    
    after that we compare card with psd template and make final changes:
            .list--tick {
                letter-spacing: 1px;
            }

            .list--tick .list__item {
                margin-bottom: 2rem;
            }

    now we set the changes for desktop version.
    we have done the share for lists and buttons before.
    so we have to only adjust the header font sizes:

        @media screen and (min-width: 1024px) {
            .plan__name {
                font-size: 1.4rem;
            }
            .plan__price {
                font-size: 5rem;
            }
            .plan__billing-cycle {
                font-size: 1.6rem;
            }
            .plan__description {
                font-size: 1.7rem;
            }
        }

    our plans look in a good shape.
    next we want to add the popular badge to primary card.
________________________________________________________
20- Popular Badge
    all we have to do:
        insert image in the header 
        use Absolute positioning for positioning the header
        the best way is to add a class to the popular card.
        so the badge will be a part of that card:

        .plan--popular .card__header::before {
            content: url(../images/popular.svg);
        }

    now we can easily style this:
    the badge should be positioned absolutely. so the parent must be relative:
    
        .plan--popular .card__header {
            position: relative;
        }

        .plan--popular .card__header::before {
            content: url(../images/popular.svg);
            width: 40px;
            display: inline-block;
            position: absolute;
            top: -6px;
            right: 5%;
        }
________________________________________________________
21- Media Objects
    the user interface pattern is officially called a media Object.
    we have an icon on the left
    on the right we have a title followed by some text.
    this pattern is seen on any social networking platform.

    so we have a div that contains two elements: image and body:

        <div class="media">
            <div class="media__image"></div>
            <div class="media__body"></div>
        </div>

    for the image we use the icon template:

        <svg class="icon icon--primary">
        <use xlink:href="images/sprite.svg#settings"></use>
        </svg>

    in the psd design, we have <h2> above the media Object.
    so we use <h3> for thtile:

        <div class="media">
        <div class="media__image">
            <svg class="icon icon--primary">
            <use xlink:href="images/sprite.svg#snap"></use>
            </svg>
        </div>
        <div class="media__body">
            <h3 class="media__title">Easy Start & Managed Updates</h3>
            <p>
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Molestiae,
            reprehenderit?
            </p>
        </div>
        </div>

    now we set the changes for desktop version.

        @media screen and (min-width: 1024px) {
            .media__title {
                font-size: 1.8rem;
            }
            .media__body {
                font-size: 1.8rem;
            }
        }
    
    now the structure is ready.
    so the bg is black but we'll implement that when designing container section.
    next we will implement qoute component.
________________________________________________________
22- Quotes
    should we include the image in the quote? NO!
    imagine we want to have articles on this website and we have quotes from others.
    we dont necesserily need to put an image.
        *some text
        *Name of the person
        *orgaanization
    after that we combine it with an image and put it inside a card and create a testimonial componenet.
    we can use <q> or <blockquote> which is an inline element:

        <blockquote class="quote">
        <p>
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Ea tempora
            maiores facilis rem alias ipsum, quasi accusantium dolores labore nobis.
        </p>
        </blockquote>

    styling the body:

        .quote {
            font-size: 3rem;
            font-style: italic;
            columns: var(--color-body-darker);
            line-height: 1.3;
        } 

    it is better to store the color in color palette as the darker version of body text.
    we want to add "" to code. so we dont have to remember every time we put a quote.
    we use Pseudo element Selector to add content before and after the content of p element:

        .quote__text::before {
            content: open-quote;
            font-size: 4rem;
        }
        .quote__text::after {
            content: close-quote;
            font-size: 4rem;
        }
    
    now we build and style the name of the person.
    it is a media pattern:
        left: image
        right: title and text 
    so we reuse our media componenet.
    and then style the name and company and the line according to psd:

        .quote__author {
            font-family: Montserrat , Arial, Helvetica, sans-serif;
            font-size: 3rem;
            font-weight: 600;
            font-style: normal;
            margin-bottom: 0;
        }

        .quote__company {
            font-style: normal;
            color: var(--color-heading);
            opacity: 0.4;
        }

        .quote__line {
            position: relative;
            bottom: 10px
        }

    now we set the changes for desktop version.
        @media screen and (min-width: 1024px) {
            .quote {
                font-size: 2rem;
            }
            .quote__author {
                font-size: 2.4rem;
            }
            .quote__company {
                font-size: 1.6rem;
            }
        }
________________________________________________________
23 - Grids
    there are many places on this page whre we have two column grid. 
    on mobile version we always have a single column grid. 
    for demo:

        <div style="height: 100px; background: gold"></div>
        <div style="height: 100px; background: darkblue"></div> 

    this divs are placed vertically. this is exactly what we want for mobile.
    for 2 col grid starting from tablet we want to put them side by side:

        @media screen and (min-width: 768px) {
            .grid--1x2 {
                grid-template-columns: repeat(2, 1fr);
            }
        }
    
    for 3 col grid on desktops:
    
        @media screen and (min-width: 1024px) {
            .grid--1x3 {
                grid-template-columns: repeat(3, 1fr);
            }
        }