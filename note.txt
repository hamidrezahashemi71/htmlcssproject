1- Introduction
    goal: build a imaginery cloud hosting website that is:
            * beautiful
            * responsive
            * fast
    we will start with a photoshop design markup.
    then we will hand code this design markup to build the site.
    this website will look great on all screen sizes.
    all What? How? Why? questions will be answered.
    it is best practice to become HTML/CSS expert.

    we will be able to:
        convert any photoshop design markup to a fast responsive website.
________________________________________________________
3- Prerequisites 
    *Semantic HTML elements
    *Basic CSS properties (colors, orders, shadows, fonts, etc.)
    *Selectors & Pseudo-Selectors
    *CSS box model
    *Absolute & Relative positioning
    *Flex & Grid layout
    *Media queries
    *Responsive Images
    *Transformations
    *Transitions
________________________________________________________
4- How to Take This Course
    *Providing needed tools
    *Setting up the project
        photoshop design markups and all supplementary materials (images, icons, fonts)
    *Coding Lessons
        in every lesson we will code a specific part of the design.
        we will learn tips & tricks along the way
        actively get involved:
            - code along
            - try to solve before hand
________________________________________________________
5- Tools You Need
    *Google Chrome browser
    *Chrome DevTools
    *Firefox
    *VSCode Editor 
    *HTML CSS Support extension
    *CSS Peak extension
    *Prettier extension
    *Highlight Matching Tag extension
    *TODO Highlight extension
    *Live Server extension
    *git from https://git-scm.com
________________________________________________________
6- Setting Up the Project
    *folder
    *index.html
    *normalize.css
    *styles.css
    *initialize a git repository
        database that tracks project history
    *install fonts
    *install photoshop.
________________________________________________________
7- Essential Photoshop Skills
    *size of fonts
    *measure distances
    *basic tools
________________________________________________________
8- Identifying the Components
    Components of moshified.com 
        logo 
        navbar
        banner (hero)
            heading
            text
            button
        input field
        badge
        inline list
        three column grid 
        cards
            badge
            list
            button
        icon round
        link
        two column grid 
        media componenets
            icon left
            heading right
            text right
        (quote componenet + image = card) : testimonial
        callout
        footer : lists
________________________________________________________
9- Color Palette
    before building componenets lets define our color palette. 
    color palette:
        *primary color :        blue            #2584ff
        *secondary color :      lighter blue    #00d9ff 
        *accent color :         orange          #ff3400
        *heading color :        dark purple     #1b0760
        *bodytext color :       light purple    #918ca4
    we use variables to define color palette so we can reuse them:
        :root {
        --color-primary: #2584ff;
        --color-secondary: #00d9ff;
        --color-accent: #ff3400;
        --color-heading: #1b0760;
        --color-body: #918ca4;
       }
________________________________________________________
10- Typography
    fonts and their sizes.
    as we are going to pick mobile first approach we always look at mobile version first.
    we add the links from https://fonts.google.com 

    then add rule for body font family and color:
        body {
            font-family: Inter, Arial, Helvetica, sans-serif;
            color: var(--color-bodys);
        }

        TRICK: h${Heading $}*3
                <h1>Heading 1</h1>
                <h2>Heading 2</h2>
                <h3>Heading 3</h3>
        
    setting headings color: 
        h1, h2, h3 {
            color: var(--color-heading);
        }
    
    setting font sizes:
        html {
            font-size: 62.5%;
        }

        body {
            font-size: 2.4rem;
        }

        h1 {
            font-size: 7rem;
        }

        h2 {
            font-size: 4rem;
        }

        h3 {
            font-size: 3rem;
        }

    setting line spacing:
        body {
            line-height: 1.5;
        }

    setting margin between heading and text:
    first we measure it in photoshop: 20px --> 2rem 
        h1, h2, h3 {
            margin-bottom: 1rem;
        }

        p {
            /* to avoid margin collapsing */
            margin-top: 0;
        }

    now we are done with mobile version. 
    so now we set the desktop version (1024px):
        @media screen and (min-width: 1024px) {
            body {
                font-size: 1.8rem;
            }
            h1 {
                font-size: 8rem;
            }
            h3 {
                font-size: 2.4rem;
            }
        }
    
    now we are done with typography. 
    next we want to build our first component.
________________________________________________________
11- Links
    first we implement the link componenet.
    learn more links are UPPERCASE.
    links have no underline. 
    We pick the font size and weight from mobile version of photoshop design.

        a {
            text-decoration: none;
        }

        .link-arrow {
            color: var(--color-accent);
            text-transform: uppercase;
            font-weight: bold;
            font-size: 2rem;
        }
    
    now we want the arrow after the link.
    we implement this with after Pseudo-Selector:
        we also can add icon instead of 

        .link-arrow::after {
            content: '-->';
            margin-left: 5px;
        }
    
    we want the arrow move to right in hover state:

        .link-arrow::after {
            transition: margin-left 0.15s;
        }

        .link-arrow:hover::after {
            margin-left: 10px;
        }
    
    now we set the changes for desktop version:

        @media screen and (min-width: 1024px) {
            .link-arrow {
                font-size: 1.5rem;
            }
        }
    it is better to add media queries after each section.
    to better organize the componenets it is better to make a folder and keep a sample of each componenet.
________________________________________________________
12- Badges 
    size wise:
        large Badges
        small Badges
    color wise:
        light blue
        darker blue
    
    so we are gonna apply (OOP CSS). 
    second principle of OOPCSS: seperating structure from skin.
    so we will have to class for badges:
        1 fonts and paddings

            .badge {
                border-radius: 20px;
                padding: 0.5rem 2rem;
                font-weight: bold;
                white-space: nowrap;
                color: #fff;
            }

        2 color and skin 

            .badge--primary {
                background: var(--color-primary);
            }

            .badge--secondary {
                background: var(--color-secondary);
            }

            .badge--small {
                font-size: 1.6rem;
            }

    now we set the changes for desktop version:

        @media screen and (min-width: 1024px) {
            .badge {
                font-size: 1.5rem;
            }
            .badge--small {
                font-size: 1.2rem;
            }
________________________________________________________
13- Lists
    *horizontal (inline) list for navbar
    *vertical list with green ticks for cards
    *vertical list footer 
    
        .list {
            list-style: none;   #getting rid of bullet
            padding-left: 0;    #getting rid of default left padding
            color: var(--color-heading);
        }
    
    now we give each list item a class by BEM:

        .list--inline .list__item {
            display: inline-block;
            margin-right: 2rem;
        }

    now we define rules for horizontal lists:

        .list--tick {
            list-style-image: url(../images/tick.svg);
            padding-left: 3rem;
        }

        .list--tick .list__item {
            padding-left: 0.5rem;
            margin-bottom: 1rem;
        }

    now we set the changes for desktop version:
        @media screen and (min-width: 1024px) {
            .list--tick .list__item {
                padding-left: 0;
            }
        }
________________________________________________________
14- Icons
    all icons are black and have transparent bg.
    in design markup the icons are blue.
    in some cases they're placed in circle and grey bg color.
    first we combine all the icon images in single image sprite.
    https://svgsprit.es
    then put the image in images folder.
    we copy the element to the markup from down below the page:

        <svg class="icon">
        <use xlink:href="#settings"></use>
        </svg>

    the <use> contains a link referring to the sprite file.
    #settings is the id of sprite file we have to reference the address:

        <svg class="icon">
        <use xlink:href=".images/sprite.svg#settings"></use>
        </svg>
    
    now we have loaded icon to the page. 
    we work on sizing and color of icon:

        .icon {
            width: 40px;
            height: 40px;
        }

        .icon--primary {
            fill: var(--color-primary)
        }
    
    now we work on the circle use case:
    we wrap the icon in a <span> with class of icon-container
    now we set the rules for icon-container:

        .icon-container {
            background: #f3f9fa;
            width: 64px;
            height: 64px;
            border-radius: 100%;
            display: inline-flex;
            justify-content: center;
            align-items: center;
        }
________________________________________________________
15- Buttons
    we have some variations for buttons.
    COLOR vise:
        *accent color buttons
        *outline buttons
            hover effect
        *
        secondary color button
    SIZE vise:
        *content fit 
        *container fit (block buttons)

    so we define our buttons. the hover effect of each button next to its normal state:

        .btn {
            border-radius: 40px;
            border: 0;
            /* to make the pointer into a hand */
            cursor: pointer;
            font-size: 1.8rem;
            font-weight: 600;
            margin: 1rem 0;
            padding: 2rem 3rem;
            text-align: center;
            text-transform: uppercase;
            white-space: nowrap;
        }

        .btn--primary {
            background: var(--color-primary);
            color: #fff;
        }

        .btn--primary:hover {
            background: #69aaff;
        }

        .btn--secondary {
            background: var(--color-secondary);
            color: #fff;
        }
        .btn--secondary:hover {
            background: #86edff;
        }
        .btn--accent {
            background: var(--color-accent);
            color: #fff;
        }

        .btn--accent:hover {
            background: #ff9073;
        }

        .btn--outline {
            /* to make it container size */
            width: 100%;
            display: inline-block;
            background: #fff;
            border: 2px solid var(--color-heading);
            color: var(--color-heading);
        }

        .btn--outline:hover {
            background: var(--color-heading);
            color: #fff;
            border: none;
        }

    now we set the changes for desktop version: 

        @media screen and (min-width: 1024px) {
            .btn {
                font-size: 1.5rem;
            }
        }
________________________________________________________
16- Inputs
    we ha






        